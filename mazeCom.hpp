// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef MAZE_COM_HPP
#define MAZE_COM_HPP

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

#include <xsd/cxx/tree/std-ostream-operators.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
class MazeComType;
class treasureType;
class ErrorType;
class cardType;
class boardType;
class positionType;
class LoginMessageType;
class LoginReplyMessageType;
class AwaitMoveMessageType;
class TreasuresToGoType;
class MoveMessageType;
class AcceptMessageType;
class WinMessageType;
class DisconnectMessageType;
class openings;
class pin;
class row;
class MazeCom;
class winner;

#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include <xsd/cxx/tree/containers-wildcard.hxx>

class MazeComType: public ::xml_schema::string
{
  public:
  enum value
  {
    LOGIN,
    LOGINREPLY,
    AWAITMOVE,
    MOVE,
    ACCEPT,
    WIN,
    DISCONNECT
  };

  MazeComType ();

  MazeComType (value v);

  MazeComType (const char* v);

  MazeComType (const ::std::string& v);

  MazeComType (const ::xml_schema::string& v);

  MazeComType (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  MazeComType (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  MazeComType (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  MazeComType (const MazeComType& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  virtual MazeComType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  MazeComType&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_MazeComType_convert ();
  }

  protected:
  value
  _xsd_MazeComType_convert () const;

  public:
  static const char* const _xsd_MazeComType_literals_[7];
  static const value _xsd_MazeComType_indexes_[7];
};

class treasureType: public ::xml_schema::string
{
  public:
  enum value
  {
    Start01,
    Start02,
    Start03,
    Start04,
    sym01,
    sym02,
    sym03,
    sym04,
    sym05,
    sym06,
    sym07,
    sym08,
    sym09,
    sym10,
    sym11,
    sym12,
    sym13,
    sym14,
    sym15,
    sym16,
    sym17,
    sym18,
    sym19,
    sym20,
    sym21,
    sym22,
    sym23,
    sym24
  };

  treasureType ();

  treasureType (value v);

  treasureType (const char* v);

  treasureType (const ::std::string& v);

  treasureType (const ::xml_schema::string& v);

  treasureType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  treasureType (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  treasureType (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  treasureType (const treasureType& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual treasureType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  treasureType&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_treasureType_convert ();
  }

  protected:
  value
  _xsd_treasureType_convert () const;

  public:
  static const char* const _xsd_treasureType_literals_[28];
  static const value _xsd_treasureType_indexes_[28];
};

class ErrorType: public ::xml_schema::string
{
  public:
  enum value
  {
    NOERROR,
    ERROR,
    AWAIT_LOGIN,
    AWAIT_MOVE,
    ILLEGAL_MOVE,
    TIMEOUT,
    TOO_MANY_TRIES
  };

  ErrorType ();

  ErrorType (value v);

  ErrorType (const char* v);

  ErrorType (const ::std::string& v);

  ErrorType (const ::xml_schema::string& v);

  ErrorType (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  ErrorType (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  ErrorType (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  ErrorType (const ErrorType& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual ErrorType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  ErrorType&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_ErrorType_convert ();
  }

  protected:
  value
  _xsd_ErrorType_convert () const;

  public:
  static const char* const _xsd_ErrorType_literals_[7];
  static const value _xsd_ErrorType_indexes_[7];
};

class cardType: public ::xml_schema::type
{
  public:
  // openings
  // 
  typedef ::openings openings_type;
  typedef ::xsd::cxx::tree::traits< openings_type, char > openings_traits;

  const openings_type&
  openings () const;

  openings_type&
  openings ();

  void
  openings (const openings_type& x);

  void
  openings (::std::auto_ptr< openings_type > p);

  // pin
  // 
  typedef ::pin pin_type;
  typedef ::xsd::cxx::tree::traits< pin_type, char > pin_traits;

  const pin_type&
  pin () const;

  pin_type&
  pin ();

  void
  pin (const pin_type& x);

  void
  pin (::std::auto_ptr< pin_type > p);

  // treasure
  // 
  typedef ::treasureType treasure_type;
  typedef ::xsd::cxx::tree::optional< treasure_type > treasure_optional;
  typedef ::xsd::cxx::tree::traits< treasure_type, char > treasure_traits;

  const treasure_optional&
  treasure () const;

  treasure_optional&
  treasure ();

  void
  treasure (const treasure_type& x);

  void
  treasure (const treasure_optional& x);

  void
  treasure (::std::auto_ptr< treasure_type > p);

  // Constructors.
  //
  cardType ();

  cardType (const openings_type&,
            const pin_type&);

  cardType (::std::auto_ptr< openings_type >&,
            ::std::auto_ptr< pin_type >&);

  cardType (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  cardType (const cardType& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual cardType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~cardType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< openings_type > openings_;
  ::xsd::cxx::tree::one< pin_type > pin_;
  treasure_optional treasure_;
};

class boardType: public ::xml_schema::type
{
  public:
  // row
  // 
  typedef ::row row_type;
  typedef ::xsd::cxx::tree::sequence< row_type > row_sequence;
  typedef row_sequence::iterator row_iterator;
  typedef row_sequence::const_iterator row_const_iterator;
  typedef ::xsd::cxx::tree::traits< row_type, char > row_traits;

  const row_sequence&
  row () const;

  row_sequence&
  row ();

  void
  row (const row_sequence& s);

  // shiftCard
  // 
  typedef ::cardType shiftCard_type;
  typedef ::xsd::cxx::tree::traits< shiftCard_type, char > shiftCard_traits;

  const shiftCard_type&
  shiftCard () const;

  shiftCard_type&
  shiftCard ();

  void
  shiftCard (const shiftCard_type& x);

  void
  shiftCard (::std::auto_ptr< shiftCard_type > p);

  // forbidden
  // 
  typedef ::positionType forbidden_type;
  typedef ::xsd::cxx::tree::optional< forbidden_type > forbidden_optional;
  typedef ::xsd::cxx::tree::traits< forbidden_type, char > forbidden_traits;

  const forbidden_optional&
  forbidden () const;

  forbidden_optional&
  forbidden ();

  void
  forbidden (const forbidden_type& x);

  void
  forbidden (const forbidden_optional& x);

  void
  forbidden (::std::auto_ptr< forbidden_type > p);

  // Constructors.
  //
  boardType ();

  boardType (const shiftCard_type&);

  boardType (::std::auto_ptr< shiftCard_type >&);

  boardType (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  boardType (const boardType& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual boardType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~boardType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  row_sequence row_;
  ::xsd::cxx::tree::one< shiftCard_type > shiftCard_;
  forbidden_optional forbidden_;
};

class positionType: public ::xml_schema::type
{
  public:
  // row
  // 
  typedef ::xml_schema::int_ row_type;
  typedef ::xsd::cxx::tree::traits< row_type, char > row_traits;

  const row_type&
  row () const;

  row_type&
  row ();

  void
  row (const row_type& x);

  // col
  // 
  typedef ::xml_schema::int_ col_type;
  typedef ::xsd::cxx::tree::traits< col_type, char > col_traits;

  const col_type&
  col () const;

  col_type&
  col ();

  void
  col (const col_type& x);

  // Constructors.
  //
  positionType ();

  positionType (const row_type&,
                const col_type&);

  positionType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  positionType (const positionType& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual positionType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~positionType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< row_type > row_;
  ::xsd::cxx::tree::one< col_type > col_;
};

class LoginMessageType: public ::xml_schema::type
{
  public:
  // name
  // 
  typedef ::xml_schema::string name_type;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_type&
  name () const;

  name_type&
  name ();

  void
  name (const name_type& x);

  void
  name (::std::auto_ptr< name_type > p);

  // Constructors.
  //
  LoginMessageType ();

  LoginMessageType (const name_type&);

  LoginMessageType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  LoginMessageType (const LoginMessageType& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  virtual LoginMessageType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~LoginMessageType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< name_type > name_;
};

class LoginReplyMessageType: public ::xml_schema::type
{
  public:
  // newID
  // 
  typedef ::xml_schema::int_ newID_type;
  typedef ::xsd::cxx::tree::traits< newID_type, char > newID_traits;

  const newID_type&
  newID () const;

  newID_type&
  newID ();

  void
  newID (const newID_type& x);

  // Constructors.
  //
  LoginReplyMessageType ();

  LoginReplyMessageType (const newID_type&);

  LoginReplyMessageType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

  LoginReplyMessageType (const LoginReplyMessageType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

  virtual LoginReplyMessageType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~LoginReplyMessageType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< newID_type > newID_;
};

class AwaitMoveMessageType: public ::xml_schema::type
{
  public:
  // board
  // 
  typedef ::boardType board_type;
  typedef ::xsd::cxx::tree::traits< board_type, char > board_traits;

  const board_type&
  board () const;

  board_type&
  board ();

  void
  board (const board_type& x);

  void
  board (::std::auto_ptr< board_type > p);

  // treasuresToGo
  // 
  typedef ::TreasuresToGoType treasuresToGo_type;
  typedef ::xsd::cxx::tree::sequence< treasuresToGo_type > treasuresToGo_sequence;
  typedef treasuresToGo_sequence::iterator treasuresToGo_iterator;
  typedef treasuresToGo_sequence::const_iterator treasuresToGo_const_iterator;
  typedef ::xsd::cxx::tree::traits< treasuresToGo_type, char > treasuresToGo_traits;

  const treasuresToGo_sequence&
  treasuresToGo () const;

  treasuresToGo_sequence&
  treasuresToGo ();

  void
  treasuresToGo (const treasuresToGo_sequence& s);

  // treasure
  // 
  typedef ::treasureType treasure_type;
  typedef ::xsd::cxx::tree::traits< treasure_type, char > treasure_traits;

  const treasure_type&
  treasure () const;

  treasure_type&
  treasure ();

  void
  treasure (const treasure_type& x);

  void
  treasure (::std::auto_ptr< treasure_type > p);

  // Constructors.
  //
  AwaitMoveMessageType ();

  AwaitMoveMessageType (const board_type&,
                        const treasure_type&);

  AwaitMoveMessageType (::std::auto_ptr< board_type >&,
                        const treasure_type&);

  AwaitMoveMessageType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  AwaitMoveMessageType (const AwaitMoveMessageType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  virtual AwaitMoveMessageType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~AwaitMoveMessageType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< board_type > board_;
  treasuresToGo_sequence treasuresToGo_;
  ::xsd::cxx::tree::one< treasure_type > treasure_;
};

class TreasuresToGoType: public ::xml_schema::type
{
  public:
  // player
  // 
  typedef ::xml_schema::int_ player_type;
  typedef ::xsd::cxx::tree::traits< player_type, char > player_traits;

  const player_type&
  player () const;

  player_type&
  player ();

  void
  player (const player_type& x);

  // treasures
  // 
  typedef ::xml_schema::int_ treasures_type;
  typedef ::xsd::cxx::tree::traits< treasures_type, char > treasures_traits;

  const treasures_type&
  treasures () const;

  treasures_type&
  treasures ();

  void
  treasures (const treasures_type& x);

  // Constructors.
  //
  TreasuresToGoType ();

  TreasuresToGoType (const player_type&,
                     const treasures_type&);

  TreasuresToGoType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  TreasuresToGoType (const TreasuresToGoType& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  virtual TreasuresToGoType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~TreasuresToGoType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< player_type > player_;
  ::xsd::cxx::tree::one< treasures_type > treasures_;
};

class MoveMessageType: public ::xml_schema::type
{
  public:
  // shiftPosition
  // 
  typedef ::positionType shiftPosition_type;
  typedef ::xsd::cxx::tree::traits< shiftPosition_type, char > shiftPosition_traits;

  const shiftPosition_type&
  shiftPosition () const;

  shiftPosition_type&
  shiftPosition ();

  void
  shiftPosition (const shiftPosition_type& x);

  void
  shiftPosition (::std::auto_ptr< shiftPosition_type > p);

  // newPinPos
  // 
  typedef ::positionType newPinPos_type;
  typedef ::xsd::cxx::tree::traits< newPinPos_type, char > newPinPos_traits;

  const newPinPos_type&
  newPinPos () const;

  newPinPos_type&
  newPinPos ();

  void
  newPinPos (const newPinPos_type& x);

  void
  newPinPos (::std::auto_ptr< newPinPos_type > p);

  // shiftCard
  // 
  typedef ::cardType shiftCard_type;
  typedef ::xsd::cxx::tree::traits< shiftCard_type, char > shiftCard_traits;

  const shiftCard_type&
  shiftCard () const;

  shiftCard_type&
  shiftCard ();

  void
  shiftCard (const shiftCard_type& x);

  void
  shiftCard (::std::auto_ptr< shiftCard_type > p);

  // Constructors.
  //
  MoveMessageType ();

  MoveMessageType (const shiftPosition_type&,
                   const newPinPos_type&,
                   const shiftCard_type&);

  MoveMessageType (::std::auto_ptr< shiftPosition_type >&,
                   ::std::auto_ptr< newPinPos_type >&,
                   ::std::auto_ptr< shiftCard_type >&);

  MoveMessageType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  MoveMessageType (const MoveMessageType& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  virtual MoveMessageType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~MoveMessageType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< shiftPosition_type > shiftPosition_;
  ::xsd::cxx::tree::one< newPinPos_type > newPinPos_;
  ::xsd::cxx::tree::one< shiftCard_type > shiftCard_;
};

class AcceptMessageType: public ::xml_schema::type
{
  public:
  // accept
  // 
  typedef ::xml_schema::boolean accept_type;
  typedef ::xsd::cxx::tree::traits< accept_type, char > accept_traits;

  const accept_type&
  accept () const;

  accept_type&
  accept ();

  void
  accept (const accept_type& x);

  // errorCode
  // 
  typedef ::ErrorType errorCode_type;
  typedef ::xsd::cxx::tree::traits< errorCode_type, char > errorCode_traits;

  const errorCode_type&
  errorCode () const;

  errorCode_type&
  errorCode ();

  void
  errorCode (const errorCode_type& x);

  void
  errorCode (::std::auto_ptr< errorCode_type > p);

  // Constructors.
  //
  AcceptMessageType ();

  AcceptMessageType (const accept_type&,
                     const errorCode_type&);

  AcceptMessageType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  AcceptMessageType (const AcceptMessageType& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  virtual AcceptMessageType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~AcceptMessageType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< accept_type > accept_;
  ::xsd::cxx::tree::one< errorCode_type > errorCode_;
};

class WinMessageType: public ::xml_schema::type
{
  public:
  // board
  // 
  typedef ::boardType board_type;
  typedef ::xsd::cxx::tree::traits< board_type, char > board_traits;

  const board_type&
  board () const;

  board_type&
  board ();

  void
  board (const board_type& x);

  void
  board (::std::auto_ptr< board_type > p);

  // winner
  // 
  typedef ::winner winner_type;
  typedef ::xsd::cxx::tree::traits< winner_type, char > winner_traits;

  const winner_type&
  winner () const;

  winner_type&
  winner ();

  void
  winner (const winner_type& x);

  void
  winner (::std::auto_ptr< winner_type > p);

  // Constructors.
  //
  WinMessageType ();

  WinMessageType (const board_type&,
                  const winner_type&);

  WinMessageType (::std::auto_ptr< board_type >&,
                  ::std::auto_ptr< winner_type >&);

  WinMessageType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  WinMessageType (const WinMessageType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual WinMessageType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~WinMessageType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< board_type > board_;
  ::xsd::cxx::tree::one< winner_type > winner_;
};

class DisconnectMessageType: public ::xml_schema::type
{
  public:
  // name
  // 
  typedef ::xml_schema::string name_type;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_type&
  name () const;

  name_type&
  name ();

  void
  name (const name_type& x);

  void
  name (::std::auto_ptr< name_type > p);

  // erroCode
  // 
  typedef ::ErrorType erroCode_type;
  typedef ::xsd::cxx::tree::traits< erroCode_type, char > erroCode_traits;

  const erroCode_type&
  erroCode () const;

  erroCode_type&
  erroCode ();

  void
  erroCode (const erroCode_type& x);

  void
  erroCode (::std::auto_ptr< erroCode_type > p);

  // Constructors.
  //
  DisconnectMessageType ();

  DisconnectMessageType (const name_type&,
                         const erroCode_type&);

  DisconnectMessageType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

  DisconnectMessageType (const DisconnectMessageType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

  virtual DisconnectMessageType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~DisconnectMessageType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< name_type > name_;
  ::xsd::cxx::tree::one< erroCode_type > erroCode_;
};

class openings: public ::xml_schema::type
{
  public:
  // top
  // 
  typedef ::xml_schema::boolean top_type;
  typedef ::xsd::cxx::tree::traits< top_type, char > top_traits;

  const top_type&
  top () const;

  top_type&
  top ();

  void
  top (const top_type& x);

  // bottom
  // 
  typedef ::xml_schema::boolean bottom_type;
  typedef ::xsd::cxx::tree::traits< bottom_type, char > bottom_traits;

  const bottom_type&
  bottom () const;

  bottom_type&
  bottom ();

  void
  bottom (const bottom_type& x);

  // left
  // 
  typedef ::xml_schema::boolean left_type;
  typedef ::xsd::cxx::tree::traits< left_type, char > left_traits;

  const left_type&
  left () const;

  left_type&
  left ();

  void
  left (const left_type& x);

  // right
  // 
  typedef ::xml_schema::boolean right_type;
  typedef ::xsd::cxx::tree::traits< right_type, char > right_traits;

  const right_type&
  right () const;

  right_type&
  right ();

  void
  right (const right_type& x);

  // Constructors.
  //
  openings ();

  openings (const top_type&,
            const bottom_type&,
            const left_type&,
            const right_type&);

  openings (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  openings (const openings& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual openings*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~openings ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< top_type > top_;
  ::xsd::cxx::tree::one< bottom_type > bottom_;
  ::xsd::cxx::tree::one< left_type > left_;
  ::xsd::cxx::tree::one< right_type > right_;
};

class pin: public ::xml_schema::type
{
  public:
  // playerID
  // 
  typedef ::xml_schema::int_ playerID_type;
  typedef ::xsd::cxx::tree::sequence< playerID_type > playerID_sequence;
  typedef playerID_sequence::iterator playerID_iterator;
  typedef playerID_sequence::const_iterator playerID_const_iterator;
  typedef ::xsd::cxx::tree::traits< playerID_type, char > playerID_traits;

  const playerID_sequence&
  playerID () const;

  playerID_sequence&
  playerID ();

  void
  playerID (const playerID_sequence& s);

  // Constructors.
  //
  pin ();

  pin (const ::xercesc::DOMElement& e,
       ::xml_schema::flags f = 0,
       ::xml_schema::container* c = 0);

  pin (const pin& x,
       ::xml_schema::flags f = 0,
       ::xml_schema::container* c = 0);

  virtual pin*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~pin ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  playerID_sequence playerID_;
};

class row: public ::xml_schema::type
{
  public:
  // col
  // 
  typedef ::cardType col_type;
  typedef ::xsd::cxx::tree::sequence< col_type > col_sequence;
  typedef col_sequence::iterator col_iterator;
  typedef col_sequence::const_iterator col_const_iterator;
  typedef ::xsd::cxx::tree::traits< col_type, char > col_traits;

  const col_sequence&
  col () const;

  col_sequence&
  col ();

  void
  col (const col_sequence& s);

  // Constructors.
  //
  row ();

  row (const ::xercesc::DOMElement& e,
       ::xml_schema::flags f = 0,
       ::xml_schema::container* c = 0);

  row (const row& x,
       ::xml_schema::flags f = 0,
       ::xml_schema::container* c = 0);

  virtual row*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~row ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  col_sequence col_;
};

class MazeCom: public ::xml_schema::type
{
  public:
  // LoginMessage
  // 
  typedef ::LoginMessageType LoginMessage_type;
  typedef ::xsd::cxx::tree::optional< LoginMessage_type > LoginMessage_optional;
  typedef ::xsd::cxx::tree::traits< LoginMessage_type, char > LoginMessage_traits;

  const LoginMessage_optional&
  LoginMessage () const;

  LoginMessage_optional&
  LoginMessage ();

  void
  LoginMessage (const LoginMessage_type& x);

  void
  LoginMessage (const LoginMessage_optional& x);

  void
  LoginMessage (::std::auto_ptr< LoginMessage_type > p);

  // LoginReplyMessage
  // 
  typedef ::LoginReplyMessageType LoginReplyMessage_type;
  typedef ::xsd::cxx::tree::optional< LoginReplyMessage_type > LoginReplyMessage_optional;
  typedef ::xsd::cxx::tree::traits< LoginReplyMessage_type, char > LoginReplyMessage_traits;

  const LoginReplyMessage_optional&
  LoginReplyMessage () const;

  LoginReplyMessage_optional&
  LoginReplyMessage ();

  void
  LoginReplyMessage (const LoginReplyMessage_type& x);

  void
  LoginReplyMessage (const LoginReplyMessage_optional& x);

  void
  LoginReplyMessage (::std::auto_ptr< LoginReplyMessage_type > p);

  // AwaitMoveMessage
  // 
  typedef ::AwaitMoveMessageType AwaitMoveMessage_type;
  typedef ::xsd::cxx::tree::optional< AwaitMoveMessage_type > AwaitMoveMessage_optional;
  typedef ::xsd::cxx::tree::traits< AwaitMoveMessage_type, char > AwaitMoveMessage_traits;

  const AwaitMoveMessage_optional&
  AwaitMoveMessage () const;

  AwaitMoveMessage_optional&
  AwaitMoveMessage ();

  void
  AwaitMoveMessage (const AwaitMoveMessage_type& x);

  void
  AwaitMoveMessage (const AwaitMoveMessage_optional& x);

  void
  AwaitMoveMessage (::std::auto_ptr< AwaitMoveMessage_type > p);

  // MoveMessage
  // 
  typedef ::MoveMessageType MoveMessage_type;
  typedef ::xsd::cxx::tree::optional< MoveMessage_type > MoveMessage_optional;
  typedef ::xsd::cxx::tree::traits< MoveMessage_type, char > MoveMessage_traits;

  const MoveMessage_optional&
  MoveMessage () const;

  MoveMessage_optional&
  MoveMessage ();

  void
  MoveMessage (const MoveMessage_type& x);

  void
  MoveMessage (const MoveMessage_optional& x);

  void
  MoveMessage (::std::auto_ptr< MoveMessage_type > p);

  // AcceptMessage
  // 
  typedef ::AcceptMessageType AcceptMessage_type;
  typedef ::xsd::cxx::tree::optional< AcceptMessage_type > AcceptMessage_optional;
  typedef ::xsd::cxx::tree::traits< AcceptMessage_type, char > AcceptMessage_traits;

  const AcceptMessage_optional&
  AcceptMessage () const;

  AcceptMessage_optional&
  AcceptMessage ();

  void
  AcceptMessage (const AcceptMessage_type& x);

  void
  AcceptMessage (const AcceptMessage_optional& x);

  void
  AcceptMessage (::std::auto_ptr< AcceptMessage_type > p);

  // WinMessage
  // 
  typedef ::WinMessageType WinMessage_type;
  typedef ::xsd::cxx::tree::optional< WinMessage_type > WinMessage_optional;
  typedef ::xsd::cxx::tree::traits< WinMessage_type, char > WinMessage_traits;

  const WinMessage_optional&
  WinMessage () const;

  WinMessage_optional&
  WinMessage ();

  void
  WinMessage (const WinMessage_type& x);

  void
  WinMessage (const WinMessage_optional& x);

  void
  WinMessage (::std::auto_ptr< WinMessage_type > p);

  // DisconnectMessage
  // 
  typedef ::DisconnectMessageType DisconnectMessage_type;
  typedef ::xsd::cxx::tree::optional< DisconnectMessage_type > DisconnectMessage_optional;
  typedef ::xsd::cxx::tree::traits< DisconnectMessage_type, char > DisconnectMessage_traits;

  const DisconnectMessage_optional&
  DisconnectMessage () const;

  DisconnectMessage_optional&
  DisconnectMessage ();

  void
  DisconnectMessage (const DisconnectMessage_type& x);

  void
  DisconnectMessage (const DisconnectMessage_optional& x);

  void
  DisconnectMessage (::std::auto_ptr< DisconnectMessage_type > p);

  // mcType
  // 
  typedef ::MazeComType mcType_type;
  typedef ::xsd::cxx::tree::traits< mcType_type, char > mcType_traits;

  const mcType_type&
  mcType () const;

  mcType_type&
  mcType ();

  void
  mcType (const mcType_type& x);

  void
  mcType (::std::auto_ptr< mcType_type > p);

  // id
  // 
  typedef ::xml_schema::int_ id_type;
  typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

  const id_type&
  id () const;

  id_type&
  id ();

  void
  id (const id_type& x);

  // Constructors.
  //
  MazeCom ();

  MazeCom (const mcType_type&,
           const id_type&);

  MazeCom (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  MazeCom (const MazeCom& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  virtual MazeCom*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~MazeCom ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  LoginMessage_optional LoginMessage_;
  LoginReplyMessage_optional LoginReplyMessage_;
  AwaitMoveMessage_optional AwaitMoveMessage_;
  MoveMessage_optional MoveMessage_;
  AcceptMessage_optional AcceptMessage_;
  WinMessage_optional WinMessage_;
  DisconnectMessage_optional DisconnectMessage_;
  ::xsd::cxx::tree::one< mcType_type > mcType_;
  ::xsd::cxx::tree::one< id_type > id_;
};

class winner: public ::xml_schema::string
{
  public:
  // id
  // 
  typedef ::xml_schema::int_ id_type;
  typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

  const id_type&
  id () const;

  id_type&
  id ();

  void
  id (const id_type& x);

  // Constructors.
  //
  winner ();

  winner (const id_type&);

  winner (const char*,
          const id_type&);

  winner (const ::std::string&,
          const id_type&);

  winner (const ::xml_schema::string&,
          const id_type&);

  winner (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  winner (const winner& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  virtual winner*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~winner ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< id_type > id_;
};

#include <iosfwd>

::std::ostream&
operator<< (::std::ostream&, MazeComType::value);

::std::ostream&
operator<< (::std::ostream&, const MazeComType&);

::std::ostream&
operator<< (::std::ostream&, treasureType::value);

::std::ostream&
operator<< (::std::ostream&, const treasureType&);

::std::ostream&
operator<< (::std::ostream&, ErrorType::value);

::std::ostream&
operator<< (::std::ostream&, const ErrorType&);

::std::ostream&
operator<< (::std::ostream&, const cardType&);

::std::ostream&
operator<< (::std::ostream&, const boardType&);

::std::ostream&
operator<< (::std::ostream&, const positionType&);

::std::ostream&
operator<< (::std::ostream&, const LoginMessageType&);

::std::ostream&
operator<< (::std::ostream&, const LoginReplyMessageType&);

::std::ostream&
operator<< (::std::ostream&, const AwaitMoveMessageType&);

::std::ostream&
operator<< (::std::ostream&, const TreasuresToGoType&);

::std::ostream&
operator<< (::std::ostream&, const MoveMessageType&);

::std::ostream&
operator<< (::std::ostream&, const AcceptMessageType&);

::std::ostream&
operator<< (::std::ostream&, const WinMessageType&);

::std::ostream&
operator<< (::std::ostream&, const DisconnectMessageType&);

::std::ostream&
operator<< (::std::ostream&, const openings&);

::std::ostream&
operator<< (::std::ostream&, const pin&);

::std::ostream&
operator<< (::std::ostream&, const row&);

::std::ostream&
operator<< (::std::ostream&, const MazeCom&);

::std::ostream&
operator<< (::std::ostream&, const winner&);

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

// Parse a URI or a local file.
//

::std::auto_ptr< ::MazeCom >
MazeCom_ (const ::std::string& uri,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MazeCom >
MazeCom_ (const ::std::string& uri,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MazeCom >
MazeCom_ (const ::std::string& uri,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::MazeCom >
MazeCom_ (::std::istream& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MazeCom >
MazeCom_ (::std::istream& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MazeCom >
MazeCom_ (::std::istream& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MazeCom >
MazeCom_ (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MazeCom >
MazeCom_ (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MazeCom >
MazeCom_ (::std::istream& is,
          const ::std::string& id,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::MazeCom >
MazeCom_ (::xercesc::InputSource& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MazeCom >
MazeCom_ (::xercesc::InputSource& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MazeCom >
MazeCom_ (::xercesc::InputSource& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::MazeCom >
MazeCom_ (const ::xercesc::DOMDocument& d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MazeCom >
MazeCom_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

void
operator<< (::xercesc::DOMElement&, const MazeComType&);

void
operator<< (::xercesc::DOMAttr&, const MazeComType&);

void
operator<< (::xml_schema::list_stream&,
            const MazeComType&);

void
operator<< (::xercesc::DOMElement&, const treasureType&);

void
operator<< (::xercesc::DOMAttr&, const treasureType&);

void
operator<< (::xml_schema::list_stream&,
            const treasureType&);

void
operator<< (::xercesc::DOMElement&, const ErrorType&);

void
operator<< (::xercesc::DOMAttr&, const ErrorType&);

void
operator<< (::xml_schema::list_stream&,
            const ErrorType&);

void
operator<< (::xercesc::DOMElement&, const cardType&);

void
operator<< (::xercesc::DOMElement&, const boardType&);

void
operator<< (::xercesc::DOMElement&, const positionType&);

// Serialize to std::ostream.
//

void
MazeCom_ (::std::ostream& os,
          const ::MazeCom& x, 
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

void
MazeCom_ (::std::ostream& os,
          const ::MazeCom& x, 
          ::xml_schema::error_handler& eh,
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

void
MazeCom_ (::std::ostream& os,
          const ::MazeCom& x, 
          ::xercesc::DOMErrorHandler& eh,
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

// Serialize to xercesc::XMLFormatTarget.
//

void
MazeCom_ (::xercesc::XMLFormatTarget& ft,
          const ::MazeCom& x, 
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

void
MazeCom_ (::xercesc::XMLFormatTarget& ft,
          const ::MazeCom& x, 
          ::xml_schema::error_handler& eh,
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

void
MazeCom_ (::xercesc::XMLFormatTarget& ft,
          const ::MazeCom& x, 
          ::xercesc::DOMErrorHandler& eh,
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

// Serialize to an existing xercesc::DOMDocument.
//

void
MazeCom_ (::xercesc::DOMDocument& d,
          const ::MazeCom& x,
          ::xml_schema::flags f = 0);

// Serialize to a new xercesc::DOMDocument.
//

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
MazeCom_ (const ::MazeCom& x, 
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          ::xml_schema::flags f = 0);

void
operator<< (::xercesc::DOMElement&, const LoginMessageType&);

void
operator<< (::xercesc::DOMElement&, const LoginReplyMessageType&);

void
operator<< (::xercesc::DOMElement&, const AwaitMoveMessageType&);

void
operator<< (::xercesc::DOMElement&, const TreasuresToGoType&);

void
operator<< (::xercesc::DOMElement&, const MoveMessageType&);

void
operator<< (::xercesc::DOMElement&, const AcceptMessageType&);

void
operator<< (::xercesc::DOMElement&, const WinMessageType&);

void
operator<< (::xercesc::DOMElement&, const DisconnectMessageType&);

void
operator<< (::xercesc::DOMElement&, const openings&);

void
operator<< (::xercesc::DOMElement&, const pin&);

void
operator<< (::xercesc::DOMElement&, const row&);

void
operator<< (::xercesc::DOMElement&, const MazeCom&);

void
operator<< (::xercesc::DOMElement&, const winner&);

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // MAZE_COM_HPP
